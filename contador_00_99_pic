/*
 * File:   main.c
 * Author: VITOR DOS SANTOS SILVA
 
 * VERSION: 1.0
 
 */

// CONFIG
#pragma config FOSC = XT        // Oscillator Selection bits (XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RA5/MCLR/VPP Pin Function Select bit (RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD)
#pragma config BOREN = OFF      // Brown-out Detect Enable bit (BOD disabled)
#pragma config LVP = OFF        // Low-Voltage Programming Enable bit (RB4/PGM pin has digital I/O function, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EE Memory Code Protection bit (Data memory code protection off)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

#include <xc.h>
#define _XTAL_FREQ 4000000

//FUNÇÕES CRIADAS
void display1(int x);
void display2(int y);
void display12 (int x, int y);// two displays

void main () {
    
     TRISB =0b00000000; //TODOS OS PINOS DO POTB COMO SAÍDA
     TRISA = 0b11111111; //TODOS OS PINOS PORTA COMO ENTRADA
     int I= 0, J= 0; 
     //LOOP
     while(1){                  
         display12(J,I);        
        
         if (RA1==0|| RA2==0 || RA3==0 ||RA4==0){
             I++; 
             if(I==10){
                 J++;
                 I=0;
                    if(J==10){
                 J=0;
               }
             }
             __delay_ms(200);
         }     
             __delay_ms(50);
     }
  
 }//end void
     
void display1(int x){
          switch (x) {
        case 0:
            PORTB = 0b11101110;
            break;
        case 1:
            PORTB = 0b00101000;
            break;
        case 2:
            PORTB = 0b11001101;
            break;
        case 3:
            PORTB = 0b01101101;
            break;
        case 4:
            PORTB = 0b00101011;
            break;
        case 5:
            PORTB = 0b01100111;
            break;
        case 6:
            PORTB = 0b11100111;
            break;
        case 7:
            PORTB = 0b00101100;
            break;
        case 8:
            PORTB = 0b11101111;
            break;
        case 9:
            PORTB = 0b01101111;
            break;
          }
}

      void display2(int y){
      switch(y){
           case 0:
            PORTB = 0b11111110;
            break;
        case 1:
            PORTB = 0b00111000;
            break;
        case 2:
            PORTB = 0b11011101;
            break;
        case 3:
            PORTB = 0b01111101;
            break;
        case 4:
            PORTB = 0b00111011;
            break;
        case 5:
            PORTB = 0b01110111;
            break;
        case 6:
            PORTB = 0b11110111;
            break;
        case 7:
            PORTB = 0b00111100;
            break;
        case 8:
            PORTB = 0b11111111;
            break;
        case 9:
            PORTB = 0b01111111;
            break;
            
    }
} //end display2
      
 void display12(int x, int y){
        display2(y);
        __delay_ms(50);
        display1(x);
 }// end display12
